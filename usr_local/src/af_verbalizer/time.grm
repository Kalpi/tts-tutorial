# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2016 and onwards, Google, Inc.

# Afrikaans verbalizer for times. Takes ascii protocol buffers for a
# time and converts them to regular Frisian words.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;
import 'verbatim.grm' as v;

## Normal (12-hour) readings of minutes

minutes_zero = ("0" "0"?) : "";
del0 = ("0" : "")?;

## Minutes that are read as past the hour:

minutes_past = Optimize[
    ((Invert[c.PREFIX]
      ((del0 universal_rules.d1to9) |
      "10" |
      "11" |
      "12" |
      "13" |
      "14" |
      "16" |
      "17" |
      "18" |
      "19") @ c.CARDINAL) ("" : " oor"))
  | ("15" : "kwart oor")]
;

## Minutes that are read as before the hour:

subtract_from_30 =
  Invert[c.PREFIX] (
    ("20" : "10")
  | ("21" : "9")
  | ("22" : "8")
  | ("23" : "7")
  | ("24" : "6")
  | ("25" : "5")
  | ("26" : "4")
  | ("27" : "3")
  | ("28" : "2")
  | ("29" : "1"))
;

subtract_30_from =
  Invert[c.PREFIX] (
    ("31" : "1")
  | ("32" : "2")
  | ("33" : "3")
  | ("34" : "4")
  | ("35" : "5")
  | ("36" : "6")
  | ("37" : "7")
  | ("38" : "8")
  | ("39" : "9")
  | ("40" : "10")
  | ("41" : "11")
  | ("42" : "12")
  | ("43" : "13")
  | ("44" : "14"))
;

subtract_from_60 =
 Invert[c.PREFIX] (
   ("46" : "14")
 | ("47" : "13")
 | ("48" : "12")
 | ("49" : "11")
 | ("50" : "10")
 | ("51" : "9")
 | ("52" : "8")
 | ("53" : "7")
 | ("54" : "6")
 | ("55" : "5")
 | ("56" : "4")
 | ("57" : "3")
 | ("58" : "2")
 | ("59" : "1"))
;

minutes_before = Optimize[
    ((subtract_from_30 @ c.CARDINAL) ("" : " voor half"))
  | ("30" : "half")
  | ((subtract_30_from @ c.CARDINAL) ("" : " oor half"))
  | ("45" : "kwart voor")
  | ((subtract_from_60 @ c.CARDINAL) ("" : " voor"))]
;

hours_24_to_12 =
  Invert[c.PREFIX] (
    ("0" : "12")
  | ("00" : "12")
  | (del0 universal_rules.d1to9)
  | ("10" : "10")
  | ("11" : "11")
  | ("12" : "12")
  | ("13" : "1")
  | ("14" : "2")
  | ("15" : "3")
  | ("16" : "4")
  | ("17" : "5")
  | ("18" : "6")
  | ("19" : "7")
  | ("20" : "8")
  | ("21" : "9")
  | ("22" : "10")
  | ("23" : "11")
  | ("24" : "12"))
;

hours_24_to_12_next =
  Invert[c.PREFIX] (
    ("0" : "1")
  | ("00" : "1")
  | ("1" : "2")
  | ("2" : "3")
  | ("3" : "4")
  | ("4" : "5")
  | ("5" : "6")
  | ("6" : "7")
  | ("7" : "8")
  | ("8" : "9")
  | ("9" : "10")
  | ("10" : "11")
  | ("11" : "12")
  | ("12" : "1")
  | ("13" : "2")
  | ("14" : "3")
  | ("15" : "4")
  | ("16" : "5")
  | ("17" : "6")
  | ("18" : "7")
  | ("19" : "8")
  | ("20" : "9")
  | ("21" : "10")
  | ("22" : "11")
  | ("23" : "12")
  | ("24" : "1"))
;

### Periods definitions. If present, generates the phrase, if not
### present nothing is generated.

period_night =
    (universal_rules.time_speak_period_true ("" : " snags"))
  | universal_rules.time_speak_period_false
  | ""
;

period_morning =
    (universal_rules.time_speak_period_true ("" : " soggens"))
  | universal_rules.time_speak_period_false
  | ""
;

period_afternoon =
    (universal_rules.time_speak_period_true ("" : " smiddags"))
  | universal_rules.time_speak_period_false
  | ""
;

period_evening =
    (universal_rules.time_speak_period_true ("" : " saans"))
  | universal_rules.time_speak_period_false
  | ""
;

func SayHours[hours, cardinal] {
  return Optimize[("" : " ") (hours @ cardinal )];
}

night_hours = (("0" : "12") | ("00" : "12") | "1" | "2" | "3");
morning_hours = ("4" | "5" | "6" | "7" | "8" | "9" | "10" | "11");
afternoon_hours = ("12" | "13" | "14" | "15" | "16" | "17");
evening_hours = ("18" | "19" | "20" | "21" | "22" | "23" | "24");

hours_12_before =
    (SayHours[night_hours @ hours_24_to_12_next, c.CARDINAL] period_night)
  | (SayHours[morning_hours @ hours_24_to_12_next, c.CARDINAL] period_morning)
  | (SayHours[afternoon_hours @ hours_24_to_12_next, c.CARDINAL]
     period_afternoon)
  | (SayHours[evening_hours @ hours_24_to_12_next, c.CARDINAL] period_evening)
;

hours_12_past =
    (SayHours[night_hours @ hours_24_to_12, c.CARDINAL] period_night)
  | (SayHours[morning_hours @ hours_24_to_12, c.CARDINAL] period_morning)
  | (SayHours[afternoon_hours @ hours_24_to_12, c.CARDINAL] period_afternoon)
  | (SayHours[evening_hours @ hours_24_to_12, c.CARDINAL] period_evening)
;

say_hour = "" : " uur";

hours_12_zero_minutes =
    (SayHours[night_hours @ hours_24_to_12, c.CARDINAL] say_hour period_night)
  | (SayHours[morning_hours @ hours_24_to_12, c.CARDINAL]
     say_hour period_morning)
  | (SayHours[afternoon_hours @ hours_24_to_12, c.CARDINAL]
     say_hour period_afternoon)
  | (SayHours[evening_hours @ hours_24_to_12, c.CARDINAL]
     say_hour period_evening)
;

## Normal 12-hour-style

twelve_hour_pre = Optimize[
   (universal_rules.time_minutes minutes_before universal_rules.time_hours hours_12_before)
 | (universal_rules.time_minutes minutes_past universal_rules.time_hours hours_12_past)
 | ((universal_rules.time_minutes minutes_zero)? universal_rules.time_hours hours_12_zero_minutes)]
;

## The above set of rules gets things wrong when it comes to hours that are on
## the border between periods. It assumes you can determine the correct period
## by looking at where the particular time falls. By that logic, 17:45 is in the
## afternoon, not in the evening, hence "'s middags". But that's not how it
## works. The semantic scope of things like "'s avonds" and "'s middags" is with
## the hour so that when you say "kwart voor zes PERIOD" you are actually
## saying "a quarter hour before [six in the evening]". But there are lexical
## exceptions even to this: it doesn't work for 12 noon. So the easiest way to
## fix this is by a fix-up hack such as the following:

period_correction_hack_pairs =
   ("half twaalf saans" : "half twaalf snags")
 | ("voor twaalf saans" : "voor twaalf snags")
 | ("half vier snags" : "half vier soggens")
 | ("voor vier snags" : "voor vier soggens")
 | ("half zes smiddags" : "half zes saans")
 | ("voor zes smiddags" : "voor zes saans")
;

sigstar = universal_rules.kBytes*;

period_correction_hack =
 CDRewrite[period_correction_hack_pairs, "", "", sigstar]
;

twelve_hour_format =
  Optimize[twelve_hour_pre @ period_correction_hack];

## 24 hour style

hours =
    (del0 universal_rules.kDigit)
  | ("1" universal_rules.kDigit)
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
;

one_to_five = "1" | "2" | "3" | "4" | "5";

minutes1 =  (del0 universal_rules.d1to9) | (one_to_five universal_rules.kDigit);

seconds1 = minutes1;

twenty_four_hour_format =
  Optimize[universal_rules.time_hours
     (hours @ c.CARDINAL)
     say_hour
     universal_rules.time_minutes
     ("" : " ")
     ((minutes1 @ c.CARDINAL) | ("0" : ""))]
;

# if all three (hours, minutes, seconds) are given we can assume it's a duration
duration = Optimize[
    universal_rules.time_hours
    c.CARDINAL
    say_hour
    universal_rules.time_minutes
    ("" : " ")
    ((minutes1 @ c.CARDINAL) | ("0" : " nul "))
    ("" : " minuten en_conj ")
    universal_rules.time_seconds
    ((seconds1 @ c.CARDINAL) | ("0" : " nul "))
    ("" : " seconden ")
];

zones = universal_rules.ins_space
        (("HST" : "hawaise standaard tyd") |
        ("AKST" : "alaska standaard tyd") |
        ("PST" : "pasifiese standaard tyd") |
        ("MST" : "berg standaard tyd") |
        ("CST" : "sentrale standaard tyd") |
        ("EST" : "oostelike standaard tyd") |
        ("AST" : "atlantiese standaard tyd") |
        ("WET" : "wes-europese tyd") |
        ("GMT" : "greenwich gemiddelde tyd") |
        ("MET" : "middel-europese tyd") |
        ("CET" : "sentraal-europese tyd") |
        ("OET" : "oos-europese tyd") |
        ("UTC" : "geko√∂rdineerde universele tyd") |
        ("AWST" : "australiese westelike standaard tyd") |
        ("ACST" : "australiese sentrale standaard tyd") |
        ("AEST" : "australiese oostelike standaard tyd") |
        (v.MAPPINGS universal_rules.ins_space)*);

zone = universal_rules.time_zone universal_rules.quote zones universal_rules.quote;

# The original Dutch grammar was quote-free.
# TODO(rws): This way of doing it is expensive since it allows all sorts of
# spurious input. Go back and fix this more carefully.
del_quote = CDRewrite["\"" : "", "", "", universal_rules.sigma_star];

export TIME_MARKUP = Optimize[
  (universal_rules.time
   universal_rules.opening_brace
   (del_quote @ (twelve_hour_format | twenty_four_hour_format | duration))
   zone?
   universal_rules.closing_brace)
 @ universal_rules.CLEAN_SPACES
];
